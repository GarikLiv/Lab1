import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.stats import linregress
import statsmodels.api as sm

k = 1.380649E-23
e = 1.60217663E-19

def transCurrent(vBe,vT,iSat):
    return iSat*(np.exp(vBe/vT)-1)



V23_4 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47]
V24_4 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
V25_8 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
V27_1 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
V29_0 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
V33_1 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
V34_5 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
V40_3 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
V43_1 = [0, 0.005, 0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.105, 0.11, 0.115, 0.12, 0.125, 0.13, 0.135, 0.14, 0.145, 0.15, 0.155, 0.16, 0.165, 0.17, 0.175, 0.18, 0.185, 0.19, 0.195, 0.2, 0.205, 0.21, 0.215, 0.22, 0.225, 0.23, 0.235, 0.24, 0.245, 0.25, 0.255, 0.26, 0.265, 0.27, 0.275, 0.28, 0.285, 0.29, 0.295, 0.3, 0.305, 0.31, 0.315, 0.32, 0.325, 0.33, 0.335, 0.34, 0.345, 0.35, 0.355, 0.36, 0.365, 0.37, 0.375, 0.38, 0.385, 0.39, 0.395, 0.4, 0.405, 0.41, 0.415, 0.42, 0.425, 0.43, 0.435, 0.44, 0.445, 0.45, 0.455, 0.46, 0.465, 0.47, 0.475, 0.48, 0.485, 0.49, 0.495]
A23_4 = [-223.92, -225.565, -229.184, -228.855, -201.549, -198.259, -251.226, -256.161, -224.907, -214.708, -233.461, -223.262, -254.187, -234.777, -241.356, -207.471, -238.396, -231.158, -205.168, -212.405, -199.904, -214.708, -181.152, -147.595, -213.392, -193.324, -171.94, -153.846, -207.8, -248.923, -211.418, -187.402, -178.191, -193.653, -139.041, -175.888, -202.207, -170.624, -191.021, -160.096, -162.399, -150.885, -194.311, -161.083, -186.744, -214.379, -185.099, -180.165, -186.415, -201.878, -205.497, -193.324, -185.099, -191.35, -202.865, -234.777, -197.272, -209.445, -180.165, -172.927, -169.308, -166.676, -175.888, -153.188, -127.855, -56.794, -81.7971, 5.38478, 4.39782, 67.8926, 110.003, 225.149, 311.015, 425.174, 594.932, 709.091, 941.027, 1212.77, 1469.38, 1839.82, 2314.88, 2807.71, 3533.78, 4357.9, 5419.22, 6632.85, 8118.56, 10049.1, 12315.1, 15066.5, 18293.8, 22236.4, 27462.7, 33282.9, 40541.7]
A24_4 = [-182.139, -172.598, -121.276, -162.728, -152.53, -171.282, -171.282, -140.028, -145.95, -126.54, -127.855, -152.201, -141.344, -159.767, -125.224, -127.855, -136.08, -122.263, -125.224, -102.852, -141.344, -87.7189, -113.38, -98.2465, -122.263, -106.471, -125.553, -131.474, -93.6407, -158.122, -134.435, -90.3508, -133.777, -123.579, -83.771, -91.6668, -104.168, -156.806, -137.067, -98.2465, -99.5625, -130.816, -136.409, -166.676, -157.793, -149.24, -171.282, -187.402, -164.044, -181.481, -151.872, -166.018, -165.689, -138.054, -152.201, -104.497, -141.015, -134.764, -132.461, -118.644, -128.184, -91.0088, -41.6605, -19.6183, 12.9515, 4.06883, 92.2377, 89.9348, 163.957, 226.136, 295.881, 400.171, 504.789, 632.765, 794.299, 959.122, 1205.2, 1499.65, 1829.95, 2270.8, 2767.9, 3340.34, 4207.55, 5065.55, 6244.65, 7596.13, 9257.52, 11449.9, 14057.5, 16953.2, 20560.2, 25034.5, 30721.7, 37315.9, 45202.1, 54861.9, 66652.8, 81580.7, 98781.5, 119833]
A25_8 = [-107.787, -87.0609, -110.748, -127.526, -121.605, -123.579, -83.442, -67.3216, -99.5625, -63.0448, -99.2335, -97.5885, -81.7971, -64.6897, -61.3998, -61.7288, -109.761, -76.8623, -80.1522, -88.3769, -73.9014, -112.722, -100.549, -39.3576, -64.6897, -52.1882, -76.2043, -57.123, -86.7319, -73.9014, -134.764, -116.67, -84.758, -107.129, -68.9666, -108.445, -133.777, -134.435, -94.2987, -76.2043, -70.6115, -91.6668, -88.0479, -45.6084, -48.2403, -107.129, -72.9144, -81.4681, -103.51, -88.7059, -75.2173, -85.087, -93.9697, -70.2825, -67.6506, -66.9926, -55.478, -23.5662, -20.2763, -33.1068, 4.72681, 16.8994, 25.1241, 3.41085, 30.3879, 84.013, 83.684, 152.443, 215.937, 263.641, 378.128, 487.682, 598.551, 775.875, 944.317, 1174.28, 1436.48, 1779.29, 2180, 2655.71, 3208.09, 3951.27, 4927.71, 6010.74, 7330.64, 8903.86, 10911.7, 13525.8, 16286.7, 19743.7, 23967.6, 29165.3, 35795, 43350.2, 52555, 63621.8, 77037.7, 94455.9, 114258, 138328]
A27_1 = [-161.412, -138.383, -130.158, -111.735, -122.592, -157.793, -146.937, -167.005, -198.259, -176.875, -105.813, -176.217, -136.409, -153.846, -134.764, -167.334, -189.047, -157.464, -127.855, -158.122, -173.256, -122.263, -202.536, -138.054, -190.692, -160.754, -199.904, -165.031, -153.188, -167.005, -154.175, -148.582, -130.816, -119.96, -128.842, -147.266, -107.458, -140.028, -127.526, -138.383, -131.145, -139.699, -110.419, -138.054, -155.161, -168.321, -128.513, -138.712, -118.315, -143.318, -172.269, -158.451, -134.764, -180.165, -171.611, -145.621, -121.605, -120.289, -102.523, -78.1782, -83.442, -55.478, -68.3086, -2.83992, 8.01669, 54.075, 62.2998, 121.189, 266.601, 306.08, 407.737, 545.255, 649.544, 885.428, 1053.21, 1297.65, 1595.06, 1987.87, 2458.32, 3009.05, 3723.61, 4524.7, 5646.88, 6916.77, 8415.31, 10254.4, 12594.8, 15406.6, 18642.6, 22663.1, 27495.6, 33306.2, 40914.7, 49416.8, 59825.6, 72461.4, 87688.7, 107369, 129760, 156973]
A29_0 = [-145.95, -128.513, -162.399, -151.214, -136.08, -116.012, -102.852, -151.543, -112.064, -148.253, -149.24, -110.419, -144.963, -102.194, -134.106, -161.412, -155.161, -139.699, -159.438, -113.051, -162.728, -174.243, -133.448, -152.201, -181.81, -161.083, -134.435, -115.025, -150.227, -164.044, -175.888, -169.637, -178.191, -186.415, -164.373, -166.018, -154.504, -152.859, -140.028, -181.152, -201.549, -176.546, -185.099, -179.836, -207.142, -164.702, -116.999, -160.754, -171.611, -183.125, -155.161, -153.846, -162.728, -123.579, -89.6928, -95.6146, -137.725, -113.38, -111.077, -85.745, -37.3837, -55.478, -29.817, 1.76591, 34.9937, 87.3029, 152.114, 246.862, 292.921, 360.363, 511.698, 643.951, 807.787, 1035.78, 1294.36, 1626.31, 2050.05, 2496.15, 3030.76, 3711.77, 4575.36, 5601.48, 6933.88, 8417.94, 10336.9, 12611.9, 15244.4, 18651.1, 22603.6, 27415.7, 33136.8, 40186.4, 49039.4, 59287.4, 71650.8, 86605.6, 104765, 128095, 154717, 186751]
A33_1 = [-122.263, -146.279, -158.451, -121.605, -117.986, -103.181, -100.878, -121.276, -161.412, -124.237, -148.253, -150.227, -139.041, -126.868, -114.038, -131.803, -153.188, -144.963, -110.748, -148.253, -137.725, -154.504, -155.49, -164.373, -157.793, -108.116, -141.673, -112.393, -157.793, -154.832, -180.494, -150.556, -203.523, -190.363, -151.543, -148.911, -162.399, -182.796, -172.598, -174.243, -142.989, -152.53, -191.021, -149.569, -154.832, -161.083, -161.741, -156.806, -156.148, -126.54, -132.79, -133.119, -139.699, -96.9306, -104.497, -115.354, -71.5985, -50.5432, 28.7429, 49.1402, 56.049, 114.938, 100.791, 231.071, 287.328, 376.484, 421.555, 548.544, 656.453, 794.628, 1005.84, 1274.29, 1512.15, 1858.9, 2283.63, 2792.57, 3400.54, 4194.39, 5104.04, 6188.39, 7429.99, 9093.69, 11164.7, 13590.3, 16313, 19718.4, 23825.5, 29136.3, 35159.4, 42469.5, 51231.2, 61799.2, 75359.8, 90883.5, 109440, 131986, 159076, 193750, 233053, 280785]
A34_5 = [-110.419, -169.966, -158.78, -143.976, -176.875, -175.559, -153.846, -140.357, -112.722, -140.357, -122.921, -151.872, -127.197, -87.7189, -140.028, -147.266, -163.715, -170.295, -175.559, -165.031, -135.422, -150.556, -187.731, -182.139, -183.454, -131.145, -120.947, -149.569, -120.947, -143.976, -142.66, -146.608, -115.683, -153.188, -161.741, -137.067, -159.109, -184.112, -114.367, -116.341, -116.67, -133.448, -135.751, -172.269, -135.751, -168.321, -157.793, -125.553, -159.109, -97.5885, -142.989, -127.526, -162.07, -141.673, -122.263, -105.484, -66.0057, -65.6767, -41.6605, 8.67467, 78.4202, 77.7622, 128.097, 192.579, 268.575, 365.956, 471.561, 590.326, 757.452, 933.79, 1167.7, 1445.37, 1736.52, 2123.74, 2636.96, 3215.98, 3960.48, 4837.24, 5884.73, 7133.9, 8652.51, 10518.9, 13018.2, 15670.5, 18858.1, 22834.9, 27597.6, 33600.7, 40624.2, 48851.3, 58787.4, 70882.3, 86355.3, 104034, 125210, 150796, 181404, 220662, 265511, 319358]
A40_3 = [-76.5333, -67.3216, -107.129, -72.2564, -67.6506, -105.813, -88.0479, -75.2173, -63.3738, -57.123, -84.758, -88.0479, -126.54, -80.4812, -74.2304, -86.7319, -55.1491, -75.5463, -109.103, -56.465, -67.6506, -121.276, -71.9275, -87.7189, -131.474, -103.51, -136.738, -111.406, -74.5594, -90.3508, -56.794, -105.484, -108.445, -108.116, -113.38, -138.383, -139.041, -128.842, -131.474, -88.0479, -90.6798, -99.2335, -130.487, -116.67, -73.2434, -29.159, -55.807, -69.6245, -32.4489, -37.7127, -21.9212, -7.77475, -10.4067, 50.1272, 79.4071, 75.4593, 146.192, 176.788, 192.908, 280.419, 337.992, 421.555, 521.238, 620.922, 749.885, 935.764, 1128.55, 1358.84, 1654.27, 2000.04, 2361.93, 2916.93, 3517.66, 4309.21, 5212.61, 6332.82, 7698.45, 9349.31, 11292.3, 13784.7, 16391, 19709.5, 24016.3, 28917.9, 34720.9, 41797.1, 50127.1, 60850.8, 73045.7, 87675.5, 105259, 126306, 153271, 183845, 220284, 264295, 316889, 384117, 459882, 550895]
A43_1 = [-149.898, -129.829, -149.898, -132.132, -153.517, -144.305, -141.673, -174.901, -203.194, -156.806, -157.135, -157.135, -170.624, -146.608, -109.432, -120.947, -184.441, -187.073, -163.715, -170.953, -159.438, -148.582, -136.08, -118.315, -144.634, -140.686, -158.78, -137.067, -128.513, -148.253, -160.096, -132.79, -179.836, -140.686, -184.77, -161.412, -160.096, -144.963, -182.796, -169.308, -143.318, -141.673, -110.09, -122.263, -140.686, -100.878, -110.748, -106.471, -90.0218, -96.9306, -84.429, -83.771, -29.817, -46.5954, 19.8603, 51.4431, 156.39, 185.341, 218.569, 265.286, 347.862, 458.402, 582.759, 778.836, 927.868, 1112.76, 1436.81, 1788.83, 2106.63, 2556.36, 3131.76, 3833.16, 4684.91, 5643.91, 6849.66, 8268.25, 10063.2, 12188.8, 14668.1, 17584.5, 21111, 25395.7, 30883.2, 36997.8, 44330.6, 53335.4, 63890, 77403.8, 92866.6, 111248, 133301, 159677, 193341, 231294, 277032, 331622, 396838, 479902, 573826, 685920]
a23_4 = [x*1E-09 for x in A23_4]
a24_4 = [x*1E-09 for x in A24_4]
a25_8 = [x*1E-09 for x in A25_8]
a27_1 = [x*1E-09 for x in A27_1]
a29_0 = [x*1E-09 for x in A29_0]
a33_1 = [x*1E-09 for x in A33_1]
a34_5 = [x*1E-09 for x in A34_5]
a40_3 = [x*1E-09 for x in A40_3]
a43_1 = [x*1E-09 for x in A43_1]

def getVlist(n):
    match (n):
        case 0:
            return V23_4,23.4
        case 1:
            return V24_4,24.4
        case 2:
            return V25_8,25.8
        case 3:
            return V27_1,27.1
        case 4:
            return V29_0,29.0
        case 5:
            return V33_1,33.1
        case 6:
            return V34_5,34.5
        case 7:
            return V40_3,40.3
        case 8:
            return V43_1,43.1

def getAlist(n):
    match (n):
        case 0:
            return a23_4,"23_4"
        case 1:
            return a24_4,"24_4"
        case 2:
            return a25_8,"25_8"
        case 3:
            return a27_1,"27_1"
        case 4:
            return a29_0,"29_0"
        case 5:
            return a33_1,"33_1"
        case 6:
            return a34_5,"34_5"
        case 7:
            return a40_3,"40_3"
        case 8:
            return a43_1,"43_1"

Vdata = [getVlist(i) for i in range(9)]
Adata = [getAlist(i) for i in range(9)]

fitData = [curve_fit(transCurrent,Vdata[i][0],Adata[i][0]) for i in range(9)]

for i in range (9):
    print(f"At {Vdata[i][1]} C, V_T = {fitData[i][0][0]} with err: {np.sqrt(np.diag(fitData[i][1]))[0]}")
for i in range (9):
    print(f"At {Vdata[i][1]} C, I_S = {fitData[i][0][1]} with err: {np.sqrt(np.diag(fitData[i][1]))[1]}")
boltz = 0
boltzVar = 0
for i in range(9):
    boltz += fitData[i][0][0]*e/(Vdata[i][1]+273)
    boltzVar += (np.sqrt(np.diag(fitData[i][1]))[0]*e/(Vdata[i][1]+273))**2
boltzC = boltz/9
boltzErr = np.sqrt(boltzVar)

error = ((boltzC - k + boltzErr)*100/k,(boltzC - k - boltzErr)*100/k)
print(f"k = {boltzC} with err {boltzErr}")
print(f"We found a {error[0]}% error for the upper bound, and a {error[1]}% for the lower bound")

Is = [(Vdata[i][1]+273,fitData[i][0][1]) for i in range(9)]

def satCurrent(T,Eg):
    return Is[0][1]*(T/Is[0][0])**3*np.exp((e*Eg/k)*((1/Is[0][0])-(1/T)))

Bg = curve_fit(satCurrent,[Is[i][0] for i in range(9)],[Is[i][1] for i in range(9)])
print(f"Eg = {Bg[0]} with err: {np.sqrt(np.diag(Bg[1]))}")

'''
[Graphing Section]
'''

'''
[New Sat Current Model]
'''
lnIs = np.array([float(np.log(fitData[i][0][1])) for i in range(9)])
Trecip = np.array([float(1/(Vdata[i][1]+273)) for i in range (9)])
TrecipVec = Trecip[:,np.newaxis]
print(Trecip)
print(lnIs)
linCurrSlope, _, _, _ = np.linalg.lstsq(TrecipVec,lnIs)
paramsSat = linregress(Trecip,lnIs)
print(paramsSat)
print(-k*paramsSat[0]/e)
print(-k*linCurrSlope/e)
intervalT = np.linspace(290,320,1000)
plt.figure()
plt.xlabel('1/T (Kelvin)^-1',fontsize = 14)
plt.ylabel('ln(I_S) (ln(Amps))',fontsize=14)
plt.scatter(Trecip,lnIs,color="black",label="data",s=5)
plt.plot((1/intervalT),(1/intervalT)*paramsSat[0] + paramsSat[1],color="black",linewidth=1.2,label ="Best-Fit Curve")
plt.legend()
plt.savefig("linSiSatCurrent.png",bbox_inches='tight')
plt.close()
'''
[Temp vs Sat Current]
'''
plt.figure()
plt.xlim(290,320)
plt.xlabel('T (Kelvin)',fontsize=14)
plt.ylabel('I_S (Pico Amps)',fontsize=14)
plt.scatter([Is[i][0] for i in range(9)],[Is[i][1]*1E012 for i in range(9)],color="black",label ="data",s=10)
plt.plot(intervalT,satCurrent(intervalT,1.1)*1E012,color="black",linestyle="dashed",linewidth=1.2,label="Expected curve (Eg = 1.11eV)")
plt.plot(intervalT,satCurrent(intervalT,Bg[0])*1E012,color="black",linewidth=1.2,label="Best-Fit curve (Eg = 1.48eV)")
plt.legend()
plt.savefig("2_6SiSat_Current.png")
plt.close()

'''
[Volt Vs Current]
'''
intervalV = np.linspace(0,0.5,1000)
for i in range(9):
    plt.figure()
    plt.xlim(0,0.5)
    plt.xlabel('V_BE (Volts)',fontsize=14)
    plt.ylabel('I_C (Nano Amps)',fontsize=14)
    name = "2_6SiTemp" + str(getAlist(i)[1])+ ".png"
    plt.scatter(getVlist(i)[0],[x*1E+09 for x in getAlist(i)[0]],color = "black",label ="data",s=5)
    plt.plot(intervalV,[x*1E+09 for x in transCurrent(intervalV,fitData[i][0][0],fitData[i][0][1])],color ="black",linewidth=1.2,label="Best-Fit Curve")
    plt.legend()
    plt.savefig(name,bbox_inches='tight')
    plt.close()

'''
[Thermal Volt vs Temp]
'''
def thermVolt(T,k):
    return k*T/e

Temps = np.array([Vdata[i][1] + 273 for i in range(9)])
VoltsT = np.array([fitData[i][0][0] for i in range(9)])
ErrVT = np.array([np.sqrt(np.diag(fitData[i][1]))[0] for i in range(9)])
VarVT = np.array([ErrVT[x]**2 for x in range(9)])
weightVT = np.array([1/VarVT[x] for x in range(9)])
model = sm.WLS(VoltsT, Temps, weights = weightVT)
results = model.fit()
print(results.summary())
Temps = Temps[:,np.newaxis]
a, _, _, _ = np.linalg.lstsq(Temps, VoltsT)
print(a)
print(k/e)
ssR = 0
SoSqrs = 0
for i in range(9):
    ssR += (VoltsT[i] - Temps[i]*a)**2
    SoSqrs += (VoltsT[i]-np.mean(VoltsT))**2
print(f"ssR = {ssR}")
print(f"SoSqrs = {SoSqrs}")
r = 1-(ssR/SoSqrs)
print(f"R^2 = {r}")
s = 0
for i in range(9):
    s+= (VoltsT[i] - Temps[i]*a)**2

np.sqrt(s/7)
print(f"Std dev of resiudals = {s}")
intervalT = np.linspace(290,320,1000)
plt.figure()
plt.xlim(290,320)
plt.xlabel('T (Kelvin)',fontsize=14)
plt.ylabel('V_T (Volts)',fontsize=14)
plt.scatter(Temps,VoltsT,color="black",label="data",s=5)
plt.plot(intervalT,intervalT*a,color="black",linewidth=1.2,label="Best-Fit Curve")
plt.plot(intervalT,intervalT*k/e,color="blue",linewidth=1.2,label="Expected Thermal Voltage Curve")
plt.legend()
plt.savefig("2_6SiBoltz.png",bbox_inches="tight")
plt.close()
for i in range (9):
    print(Temps[i])
for i in range (9):
    print(str(fitData[i][0][0])[:8] + ' '+ str(np.sqrt(np.diag(fitData[i][1]))[0]))
"""
[Outlier Code]
truncTemps = Temps[1:9]
truncVoltsT = VoltsT[1:9]
aNew, _, _, _ = np.linalg.lstsq(truncTemps, truncVoltsT)
print(aNew)
"""
